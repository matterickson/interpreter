<program> ::= <declarations> <fdecls> <statement_seq> .

<fdecls> ::= <fdec>; | <fdecls> <fdec>; |
<fdec> ::= def <type> <fname> ( <params> ) <declarations> <statement_seq> fed
<params> ::= <type> <var> | <type> <var>, <params> |
<fname> ::= <id>

<declarations> ::= <decl>; | <declarations> <decl>; |
<decl> ::= <type> <varlist>
<type> ::= int | double
<varlist> ::= <var>, <varlist> | <var>

<statement_seq> ::= <statement>; | <statement>; <statement_seq>

<statement> ::= <var> = <expr> |
	if <bexpr> then <statement_seq> fi |
	if <bexpr> then <statement_seq> else <statement_seq> fi |
	while <bexpr> do <statement_seq> od |
	print <expr> |
	return <expr> |

<expr> ::= <expr> + <term> | <expr> - <term> | <term>
<term> ::= <term> * <factor> | <term> / <factor> | <term> % <factor> | <factor>
<factor> ::= <var> | <number> | (<expr>) | <fname>(<exprseq>)
<exprseq> ::= <expr>, <exprseq> | <expr> |

<bexpr> ::= <bexpr> or <bterm> | <bterm>
<bterm> ::= <bterm> and <bfactor> | <bfactor>
<bfactor> ::= not <bfactor> | (<expr> <comp> <expr>)

<comp> ::= < | > | = | <= | >= | <>

<var> ::= <id>
<letter> ::= a | b | c | ... | z
<digit> ::= 1 | 2 | 3 | ... | 0
<id> ::= <letter> | <id><letter> | <id><digit>

<number> ::= <integer> | <double>